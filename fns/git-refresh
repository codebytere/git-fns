#!/usr/bin/env bash

set -e

: '
git refresh [-r|remote=<name>] [-b|--branch=<name>]

Cleanly rebase a local working branch on a remote branch,
which defaults to origin/master.
'

# if remote not passed, default to origin
REMOTE="origin"

# if branch not passed, default to master
BRANCH="master"

# handle user flag
for i in "$@"
do
case $i in
  -r=*|--remote=*)
  REMOTE="${i#*=}"
  ;;
  -b=*|--branch=*)
  BRANCH="${i#*=}"
  ;;
  *)
  echo "Unknown argument: $i" && exit 1
  ;;
esac
done

if CURRENT_BRANCH=$(git symbolic-ref --short -q HEAD)
then
  # stash the changes in the current branch
  git stash

  # checkout the chosen branch 
  git checkout "$BRANCH"

  # pull from remote branch and rebase
  git pull --rebase "$REMOTE" "$BRANCH"

  # return to working branch
  git checkout "$CURRENT_BRANCH"

  # rebase current working branch 
  git rebase "$BRANCH"

  # apply locally stashed changes
  git stash apply
else
  echo 'Error: Cannot get current branch'
fi